//----------------------------------------------------------------------
//Filename: Setup.rul
//Author: Reinier Noom
//Copyright: Greentree International Ltd 2003
//Date: 17/12/2003
//Purpose:
//Modifications:
//Date: 27 Aptil 2004, Added Jade 6 Changes, RN
//Date: 30 May 2014, InstallShield 2012 update
//----------------------------------------------------------------------

//
// Main Script
//

// Include header files

	#include "ifx.h"
    #include "blank.h"
    #include "demo.h"
    #include "test.h"
	#include "rot13.h"
	#include "generic.h"
	
	
////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "gt-sv.isu"
    #define UNINST_LOGFILE_NAME_EU	 "gt-eu.isu"
    #define LAAW_OPTION_SHOW_HOURGLASS 0x00000020

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes


// ---- script function prototypes -----

    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
	prototype InstallVCRedist();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdAskDestPath();
    prototype DialogShowSdComponentDialog2();
    prototype DialogShowSdFinishReboot();

	prototype DialogAskAudience();

	prototype SetUpProgramFolders();
	prototype RegisterGTInterface();
	prototype GTCleanUp();
	prototype GTBatchFiles();
	prototype GTFreeReg();
	prototype ExtractPartialInstall();
	prototype excludeAllComponents();
	prototype SetupEUInstall();
	prototype SetupWebsiteInstall();
	prototype CreateUnInstallLinks();
	prototype SetJadeIniFileSectionForRegApp(STRING, STRING, STRING);
	prototype SetJadeIniFileSectionForLoginApp(STRING);
    // your script function prototypes


    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bInstallVC2005;
    BOOL        bIsShellExplorer, bInstallAborted, bIs32BitSetup, bIs64BitSetup;
    STRING      svDir;
    STRING      svName, svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;
	

    // your global variables
	BOOL 		bIsBlank, bIsDemo, bIsDemoSingle, bIsDemoMulti, bIsECRMComp, bIsEService, bIsEReq, bIsETime, bIsWebstore;
	BOOL		bIsTest, bIsTestPOS, bIsTestSingle, bIsTestMulti;
	BOOL		bIsBlankSingle, bIsBlankMulti, bDesktopIcons;
	BOOL		bDelEServ, bDelETime, bDelEReq, bDelECRM;
	STRING 		svRegFilePath;
    STRING		svRegCompName;
	BOOL		bDoStartBatch, bDoStopBatch, bDoDemoStartBatch, bDoDemoStopBatch;
    STRING 		svDemoBin, svDemoSystem, svBlankBin, svBlankSystem, svInstallIni;
	STRING		svDBService, svAppService, svDemoDBService, svDemoAppService;
	STRING		svTestBin, svTestSystem;
	STRING 		svTestDBService, svTestAppService;
	BOOL 		bvAbortOpt1, bvAbortOpt2;
	BOOL		bvServerAud, bvWebsiteAud, bvEndUserAud;
	STRING 		svLogFile;
///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
	STRING sRootDir ,sBinDir, sSysDir, sIniFile;
	BOOL bSingleUser, bMultiUser;

program

   Disable( BACKGROUND );

    CheckRequirements();

    SetupInstall();
	
    SetupScreen();
	
    if (ShowDialogs()<0) goto end_install;
    
	if (bvWebsiteAud) then
		SetupWebsiteInstall();
		goto end_install;
	endif;
    
	if (InstallVCRedist()<0)then
		bInstallAborted = TRUE;
		goto end_install;
	endif;
    if (ProcessBeforeDataMove()<0) goto end_install;
    if (MoveFileData()<0) goto end_install;
	if (ProcessAfterDataMove()<0) goto end_install;
	if bvServerAud then
    	if (SetupRegistry()<0) goto end_install;
    	if (SetupFolders()<0) goto end_install;
    else
    	SetupEUInstall();
    endif;
    CreateUnInstallLinks();
        
    end_install:

    CleanUpInstall();

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
    	SdFinish("Install Aborted", "The installation of Greentree has been aborted.\nGreentree setup files have been removed.", " ", "", "",bvAbortOpt1, bvAbortOpt2);
        abort;
    endif;

	if bIsDemoMulti || bIsBlankMulti || bIsTestMulti then
		RebootDialog("Greentree Setup", "You have choosen a multi-user install.\nThe Greentree services will need to be started before you log on.\nPlease start the services in the normal way or restart the machine.", 0);
	endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult, nvResult;
	STRING  szInstallIni, svResult, sPOS;
	BOOL bIsPOSReq;
	STRING svComponentSource, svComponent, svFileGroup, svFile;
	NUMBER nvError, nDisk;
begin
	
    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

	Dlg_AskForAudience:
	nResult = DialogAskAudience();
	if (nResult = BACK) goto Dlg_SdWelcome;
	
	if bvWebsiteAud then
		return 0;
	endif;
	
    Dlg_SdAskDestPath:
    nResult = DialogShowSdAskDestPath();
    if (nResult = BACK) goto Dlg_AskForAudience;//Dlg_SdWelcome;
	
	if bvServerAud then
		
		
		//Get the Partial GT Installer
		ExtractPartialInstall();
		
		Dlg_SdComponentDialog2:
		if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
			goto Dlg_SdAskDestPath;
		endif;
		nResult = DialogShowSdComponentDialog2();
		if (nResult = BACK) goto Dlg_SdAskDestPath;
		
		bIsBlank = FeatureIsItemSelected(MEDIA, "Blank System");
		bIsDemo = FeatureIsItemSelected(MEDIA, "Demo System");
		bIsDemoSingle = FeatureIsItemSelected(MEDIA, "Demo System\\Demo Single-User");
		bIsDemoMulti = FeatureIsItemSelected(MEDIA, "Demo System\\Demo Multi-User");
		bIsECRMComp = FeatureIsItemSelected(MEDIA, "Web\\eCRM");
		bIsEService = FeatureIsItemSelected(MEDIA, "Web\\eService");
		bIsWebstore = FeatureIsItemSelected(MEDIA, "Web\\WebStore");
		bIsEReq = FeatureIsItemSelected(MEDIA, "Web\\eRequistions");
		bIsETime = FeatureIsItemSelected(MEDIA, "Web\\eTimesheets");
		bIsBlankSingle = FeatureIsItemSelected(MEDIA, "Blank System\\Blank Single-User");
		bIsBlankMulti = FeatureIsItemSelected(MEDIA, "Blank System\\Blank Multi-User");
		bIsTest = FeatureIsItemSelected(MEDIA, "Test System");
		bIsTestSingle = FeatureIsItemSelected(MEDIA, "Test System\\Test Single-User");
		bIsTestMulti = FeatureIsItemSelected(MEDIA, "Test System\\Test Multi-User");
		
		GetSystemInfo( OS, nvResult, svResult );
		if (nvResult != IS_WINDOWSNT && (bIsBlankMulti || bIsDemoMulti || bIsTestMulti)) then
			MessageBox("Your choices are not valid. You have to be running NT4, Win2000 or WinXP to install a multi-user system. Please choose again.", SEVERE);
			goto Dlg_SdComponentDialog2;		
		endif;
		
		SetDialogTitle(DLG_ASK_YESNO, "Create desktop icons?");
		bDesktopIcons = AskYesNo("Would you like desktop icons created?", YES);
		
		//Changes for Jade6
		CreateDir(TARGETDIR);
		svInstallIni = TARGETDIR ^ "Install.ini";
		szInstallIni = svInstallIni;
		LongPathToQuote(szInstallIni, FALSE);
		if bIsBlank || bIsTest then
			nResult = RunGetRegData();
			if (nResult = BACK) goto Dlg_SdComponentDialog2;
			if (nResult = CANCEL) then
				bInstallAborted = TRUE;
				return -1;
			endif;
		endif;

		if bIsBlank then
			nResult = FeatureSelectItem(MEDIA, "Blank System", TRUE);
//			nResult = FeatureSelectItem(MEDIA, "Blank POS System", TRUE);
		endif;
		if bIsTest then
			nResult = FeatureSelectItem(MEDIA, "Test System with POS", TRUE);
			nResult = FeatureSelectItem(MEDIA, "Test System", FALSE);
		endif;
		if bIsBlankSingle then
			//set the single user icon download
			nResult = FeatureSelectItem(MEDIA, "Blank POS System\\BlankPOS Single-Icons", TRUE);
			nResult = FeatureSelectItem(MEDIA, "Blank POS System\\BlankPOS Multi-Icons", FALSE);
		endif;
		if bIsBlankMulti then
			nResult = FeatureSelectItem(MEDIA, "Blank POS System\\BlankPOS Multi-Icons", TRUE);
		endif;

	else	//End User Audience
		ExtractPartialInstall();
		excludeAllComponents();
		FeatureSelectItem(MEDIA, "GreentreeEndUser", TRUE);
		
		SetDialogTitle(DLG_ASK_YESNO, "Create desktop icons?");
		bDesktopIcons = AskYesNo("Would you like desktop icons created?", YES);

	endif;	

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()

    NUMBER nResult;
	STRING sCompName, sProdName, sProdVersion, sProductKey, sUnInstallKey, sUnInstallDispName;
	STRING sDir;
begin

	sCompName = @COMPANY_NAME;
	sProdName = @PRODUCT_NAME;
	sProdVersion = @PRODUCT_VERSION;
	sProductKey = @PRODUCT_KEY;
	sUnInstallKey = @UNINST_KEY;
	sUnInstallDispName = @UNINST_DISPLAY_NAME;
	svLogFile = UNINST_LOGFILE_NAME;
	if !bvServerAud then
		sProdName = "Greentree End User";
		sProductKey = "ConnectionManager.exe";
		sUnInstallKey = "Greentree End User";
		sUnInstallDispName = "Greentree End User";
		svLogFile = UNINST_LOGFILE_NAME_EU;
	endif;

	if bIsBlankSingle && !bIsBlankMulti then
		if FeatureIsItemSelected(MEDIA, "Blank System\\Blank Multi-Icons") then
	//		MessageBox("Multi-Icons", WARNING);
		else
	//		MessageBox("Single-Icons", WARNING);
		endif;
	endif;
	

  // Create app information, uninstallation, and App Paths registry keys.
	
	//InstallationInfo( @COMPANY_NAME, @PRODUCT_NAME, @PRODUCT_VERSION, @PRODUCT_KEY );
	InstallationInfo( sCompName, sProdName, sProdVersion, sProductKey);
   //nResult = DeinstallStart( svDir, svLogFile, @UNINST_KEY, 0 );
    nResult = DeinstallStart( svDir, svLogFile, sUnInstallKey, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((bIs32BitSetup) && (bIsShellExplorer)) then
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        //RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ sProductKey );
        //RegDBSetItem( REGDB_UNINSTALL_NAME, @UNINST_DISPLAY_NAME );
        RegDBSetItem( REGDB_UNINSTALL_NAME, sUnInstallDispName);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;
	
begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = FeatureMoveData( MEDIA, nDisk, 0 );

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            FeatureError( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @TITLE_CAPTIONBAR, szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile, szMsg;

begin

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.
    //
    // If you are installing self-registering files using the
    // batch method, remove the slashes from the lines below:
    //
    //     if Do ( SELFREGISTRATIONPROCESS ) < 0 then
    //         szMsg = "File(s) failed to self-register: \n" + ERRORFILENAME;
    //         MessageBox (szMsg, WARNING);
    //     endif;

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    szReferenceFile = svDir ^ @PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    DeinstallSetReference( szReferenceFile );

	svDemoBin = TARGETDIR ^ "\\Demo\\Bin64";
	svDemoSystem = TARGETDIR ^ "\\Demo\\System";

	svBlankBin = TARGETDIR ^ "\\Live\\Bin64";
	svBlankSystem = TARGETDIR ^ "\\Live\\System";

	svTestBin = TARGETDIR ^ "\\Test\\Bin64";
	svTestSystem = TARGETDIR ^ "\\Test\\System";

	//svInstallIni = TARGETDIR ^ "Install.ini";
	
	LongPathToQuote(svDemoBin, TRUE);
	LongPathToQuote(svDemoSystem, TRUE);
	LongPathToQuote(svBlankBin, TRUE);
	LongPathToQuote(svBlankSystem, TRUE);
	LongPathToQuote(svInstallIni, TRUE);
	
    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult;

begin

    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.

    nResult = CreateRegistrySet( "" );

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
    NUMBER nResult;
	STRING szInstallIni;
begin

    nResult = CreateShellObjects( "" );
	szInstallIni = svInstallIni;
	LongPathToQuote(szInstallIni, FALSE);	
	WriteProfString(szInstallIni, "Install", "DoneBlank", "FALSE");
	WriteProfString(szInstallIni, "Install", "DoingDemo", "FALSE");
	WriteProfString(szInstallIni, "Install", "DemoMulti", "FALSE");
	WriteProfString(szInstallIni, "Install", "DoingTest", "FALSE");
	WriteProfString(szInstallIni, "Install", "TestMulti", "FALSE");
	WriteProfString(szInstallIni, "Install", "DoneDemo", "FALSE");
	WriteProfString(szInstallIni, "Install", "DoneTest", "FALSE");
//	if bIsDemo && bIsDemoMulti then
//		WriteProfString(szInstallIni, "Install", "DemoMulti", "TRUE");
//	endif;
	
	if bIsBlank then
		RegJadeBlankSystem();
		//if bIsBlankMulti then
			RunBlankSetupWizard();
			if bInstallAborted = FALSE && bIsBlankMulti then
				CreateBlankServices();
				WriteProfString(szInstallIni, "Install", "DoneBlank", "TRUE");
			endif;
		//endif;
	endif;
	
	if bInstallAborted = FALSE then
		if bIsDemo then//&& bIsDemoMulti then
			WriteProfString(szInstallIni, "Install", "DoingDemo", "TRUE");
			//if bIsDemoMulti then
				WriteProfString(szInstallIni, "Install", "DemoMulti", "TRUE");
			//endif;
			RunDemoSetupWizard();
			if bInstallAborted = FALSE then
				CreateDemoServices();
				WriteProfString(szInstallIni, "Install", "DoneDemo", "TRUE");
				WriteProfString(szInstallIni, "Install", "DoingDemo", "FALSE");
				endif;
		endif;
	endif;
	
	if bInstallAborted = FALSE then
		if bIsTest then
			if bIsTestMulti then
				WriteProfString(szInstallIni, "Install", "TestMulti", "TRUE");
			endif;
			RegJadeTestSystem();
			//if bIsTestMulti then
				WriteProfString(szInstallIni, "Install", "DoingTest", "TRUE");
				RunTestSetupWizard();
				if bInstallAborted = FALSE && bIsTestMulti then
					CreateTestServices();
					WriteProfString(szInstallIni, "Install", "DoneTest", "TRUE");
				endif;
			//endif;
		endif;
	endif;
	
	if bInstallAborted = FALSE then
		GTFreeReg();
		RegisterGTInterface();
		GTBatchFiles();				
		SetUpProgramFolders();
	endif;
		
    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin

	if (bInstallAborted) then
		GTCleanUp();
        return 0;
    endif;

    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

	GTCleanUp();

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    svDir = PROGRAMFILES ^ @COMPANY_NAME ^ @PRODUCT_NAME;

    TARGETDIR  = svDir;

    SdProductName( @PRODUCT_NAME );

    Enable( DIALOGCACHE );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()
	STRING szName;
	NUMBER dx, dy;
begin

   // Enable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );
    SetFont(FONT_TITLE, STYLE_BOLD|STYLE_ITALIC, "Times New Roman");
    //SetTitle( "Greentree\n     Business Building Solutions", 30, RGB(0, 90, 66));

   // SetTitle( @TITLE_CAPTIONBAR, 0, BACKGROUNDCAPTION ); // Caption bar text.

	//szName = SUPPORTDIR ^ "bkgrnd.BMP";
    //PlaceBitmap( szName, 101, 0, 0, FULLSCREENSIZE);
    //Enable( BACKGROUND );
    GetExtents(dx,dy);
    PlaceWindow(STATUS, dx/3, CENTERED, LOWER_LEFT);
    PlaceWindow(STATUSDLG, dx/3, CENTERED, LOWER_LEFT);


end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

begin

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // Set 'setup' operation mode
    bIs64BitSetup = SYSINFO.bIsWow64 != 0;
	bIs32BitSetup = !bIs64BitSetup;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  InstallVC2005
//
//  Purpose:  This function checks whether user wants to install VC++ 2005 package,
//			  and installs the package. If any fail, then the user is informed and
//			  the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function InstallVCRedist()
    STRING  vcPath;
    STRING 	redistWildCard;
    NUMBER	nResult;
    
begin
	//Confirm whether user wants to instal MS Visual C++ 2005
	SetDialogTitle(DLG_ASK_YESNO, "Install MS VC++ Redistributables?");
	bInstallVC2005 = AskYesNo ( "This will install Microsoft Visual C++ Redistributable packages, do you want to continue?" , YES );
	
	if (bInstallVC2005) then
	
		if bvServerAud then
			redistWildCard = "vcredist*.exe";
		else
			redistWildCard = "vcredist*x86*.exe";
		endif;
			
		nResult = FindAllFiles(TARGETDIR, redistWildCard, vcPath, RESET);
		while (nResult=0)
//			if LaunchAppAndWait(vcPath, "/q", WAIT) < 0 then
			if LaunchAppAndWait(vcPath, "/q", LAAW_OPTION_SHOW_HOURGLASS) < 0 then
				MessageBox( @VC2005NotInstalled, WARNING );
				return -1;	
			endif;			
			nResult = FindAllFiles(TARGETDIR, "vcredist*.exe", vcPath, CONTINUE);
			//MessageBox(vcPath,0);
		endwhile;
		FindAllFiles(TARGETDIR, "vcredist*.exe", vcPath, CANCEL);
	
		//vcPath = TARGETDIR ^ "\\vcredist_x86.exe";
		//if LaunchAppAndWait(vcPath, "", WAIT) < 0 then
		//	MessageBox( @VC2005NotInstalled, WARNING );
        //	return -1;	
		//endif;
	else
		MessageBox( @VC2005NotInstalled, WARNING );
        return -1;
	endif;	
	
	//Check if VC++ 2005 is installed successfully
	//???
	return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowInstallVC2005
//
//  Purpose: This function handles the dialog for installing Visual C++ 2005 Redistributable
//  package.
//
//
///////////////////////////////////////////////////////////////////////////////
/*function DialogShowInstallVC2005()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "This will install Microsoft Visual C++ 2005, do you wish to Continue?";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;*/


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdAskDestPath
//
//  Purpose: This function asks the user for the destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdAskDestPath()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    svDir 	= "C:\\Greentree\\";
    nResult = SdAskDestPath( szTitle, szMsg, svDir, 0 );

    TARGETDIR = svDir;

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdComponentDialog2
//
//  Purpose: This function displays the custom component dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if ((svSetupType != "Custom") && (svSetupType != "")) then
        return 0;
    endif;

    szTitle  = "";
    szMsg    = "";
    nResult  = SdFeatureMult( szTitle, szMsg, svDir, "" );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
//	Changes:
//		M1	RN	25/01/2007	257285	Web Store installer hooks	
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions, nTest;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2, sMsg;
    NUMBER bOpt1, bOpt2, installCount;
	STRING seCRM, seTime, seReq, seServ;
	STRING seWeb;	//M1
	BOOL beCRM, beTime, beReq, beServ, bMoveData;
	BOOL beWeb;		//M1

begin

	GetProfString(svInstallIni, "Install", "eCRM", seCRM);
	GetProfString(svInstallIni, "Install", "eTime",seTime);
	GetProfString(svInstallIni, "Install", "eReq", seReq);
	GetProfString(svInstallIni, "Install", "eServ", seServ);
	GetProfString(svInstallIni, "Install", "eWeb", seWeb);	//M1
	beCRM = FALSE;
	if seCRM = "true" then
		beCRM = TRUE;
	endif;
	beTime = FALSE;
	if seTime = "true" then
		beTime = TRUE;
	endif;
	beReq = FALSE;
	if seReq = "true" then
		beReq = TRUE;
	endif;
	beServ = FALSE;
	if seServ = "true" then
		beServ = TRUE;
	endif;
	//M1 - Start
	beWeb = FALSE;
	if seWeb = "true" then
		beWeb = TRUE;
	endif;
	//M1 - Finish	
	installCount  = 0;
    if beCRM || bIsECRMComp then
    	sMsg = "eCRM";
    	installCount++;
    else
    	//delete the eService Directory
    	bDelECRM = TRUE;
    endif;
    if beReq || bIsEReq then
    	if sMsg = "" then
    		sMsg = "eRequisitions";
    	else
    		sMsg = sMsg + ", eRequisitions";
    	endif;
    	installCount++;
    else
    	//delete the eRequisitons Directory
    	bDelEReq = TRUE;
    endif;
    if beTime || bIsETime then
    	if sMsg = "" then
    		sMsg = "eTimesheets";
    	else
    		sMsg = sMsg + ", eTimesheets";
    	endif;	
    	installCount++;
    else
    	//delete the eTimesheet directory
    	bDelETime = TRUE;
    endif;
	if beServ || bIsEService then
		if sMsg = "" then
			sMsg = "eService";
		else
			sMsg = sMsg + ", eService";
		endif;
		installCount++;
	else
		//delete the eServuce Directory
		bDelEServ = TRUE;
	endif;
	//M1 - Start
	if beWeb || bIsWebstore then
		if sMsg = "" then
			sMsg = "Webstore";
		else
			sMsg = sMsg + ", Webstore";
		endif;
	endif;
	//M1 - End
	 //download the required components
	excludeAllComponents();
   	if beCRM && !bIsECRMComp then    		
   		nResult = FeatureSelectItem(MEDIA, "Web\\eCRM", TRUE);
   		if nResult >= 0 then
   			bMoveData = TRUE;
   		endif;
	endif;    		
	if beReq && !bIsEReq then
   		nResult = FeatureSelectItem(MEDIA, "Web\\eRequistions", TRUE);		
   		if nResult >= 0 then
   			bMoveData = TRUE;
   		endif;
   	endif;
	if beTime && !bIsETime then
		nResult = FeatureSelectItem(MEDIA, "Web\\eTimesheets", TRUE);				
   		if nResult >= 0 then
   			bMoveData = TRUE;
   		endif;
	endif;
	if beServ && !bIsEService then
		nResult = FeatureSelectItem(MEDIA, "Web\\eService", TRUE);				
   		if nResult >= 0 then
   			bMoveData = TRUE;
   		endif;
	endif;
	//M1 - Start
	if beWeb && !bIsWebstore then
		nResult = FeatureSelectItem(MEDIA, "Web\\WebStore", TRUE);
   		if nResult >= 0 then
   			bMoveData = TRUE;
   		endif;
	endif;
	//M1 - Finish
	if bMoveData then
    	MoveFileData();
    endif;

    szMsg1 = "";
    szMsg2 = "";
    szOption1 = "";
    szOption2 = "";

	szMsg1 = "Greentree has been installed successfully.\n";

    if sMsg != "" then
        szMsg1 = szMsg1 + "\n\nThe modules below have been requested or are required.\n" + sMsg + "\n" +
        "These are separate installs.";
        if (installCount > 3) then
        	szOption1 = "Run these installs now";
        else
        	szOption1 = "Run the installs for " + sMsg;
        endif;
        szMsg2 = "If you would like to continue to install them check the box above or these can be run manually from\n"
        + TARGETDIR ^ "\\Web" + ".";
 	endif;
 	
	
 	nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );


	if bOpt1 != TRUE then
		if (BATCH_INSTALL) then
			//need to reboot the machine
    		nDefOptions = SYS_BOOTMACHINE;
    		szTitle     = "";
    		szMsg1      = "";
    		szMsg2      = "";
    		nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );
    	else
    		nResult = 0;
    	endif;
    else
    	if beCRM || bIsECRMComp then
			seCRM = TARGETDIR ^ "\\Web\\eCRM\\eCRM.exe";
    		LongPathToQuote(seCRM, TRUE);
    		if LaunchAppAndWait(seCRM, "", WAIT) < 0 then
    			MessageBox("Launching the eCRM install failed.\nYou will need to do this manually!", WARNING);
    		endif;
    	endif;
    	if beReq || bIsEReq then
   		seCRM = TARGETDIR ^ "\\Web\\eRequisitions\\eRequisitions.exe";
    		LongPathToQuote(seCRM, TRUE);
    		if LaunchAppAndWait(seCRM, "", WAIT) < 0 then
    			MessageBox("Launching the eRequisitions install failed.\nYou will need to do this manually!", WARNING);
    		endif;
   		endif;
   		
   		if beTime || bIsETime then
   		seCRM = TARGETDIR ^ "\\Web\\eTimesheets\\eTimesheets.exe";
    		LongPathToQuote(seCRM, TRUE);
    		if LaunchAppAndWait(seCRM, "", WAIT) < 0 then
    			MessageBox("Launching the eTimesheets install failed.\nYou will need to do this manually!", WARNING);
    		endif;
   		endif;

   		if beServ || bIsEService then
   		seCRM = TARGETDIR ^ "\\Web\\eService\\eService.exe";
    		LongPathToQuote(seCRM, TRUE);
    		if LaunchAppAndWait(seCRM, "", WAIT) < 0 then
    			MessageBox("Launching the eTimesheets install failed.\nYou will need to do this manually!", WARNING);
    		endif;
   		endif;

   		//M1 - Start
   		if beWeb || bIsWebstore then
   		seWeb = TARGETDIR ^ "\\Web\\Webstore\\Webstore_Setup.exe";
    		LongPathToQuote(seWeb, TRUE);
    		if LaunchAppAndWait(seWeb, "", WAIT) < 0 then
    			MessageBox("Launching the webstore install failed.\nYou will need to do this manually!", WARNING);
    		endif;
   		endif;
   		
   		//M1 - End	
    	nResult = 0;
    	
    endif;

    return nResult;
end;

//----------------------------------------------------------------------
//Create the items on the program folder in 98 and NT
//----------------------------------------------------------------------
function SetUpProgramFolders()

begin

	ProgDefGroupType(COMMON);
	
	if bIsDemo then
		SetUpDemoProgramFolders();
	endif;
	
	if bIsBlank then
		SetUpBlankProgramFolders();
	endif;
	
	if bIsTest then
		SetUpTestProgramFolders();
	endif;
							
end;


//----------------------------------------------------------------------
//Register the Greentree Interface
//----------------------------------------------------------------------
function RegisterGTInterface()
	
	STRING svPath, svCommand, svCommandLine;
	NUMBER result;
begin
	
	if bIsBlank then
		svPath = svBlankBin;
	endif;
	if bIsDemo && bIsBlank = FALSE then
		svPath = svDemoBin;
	endif;
			
	LongPathToQuote(svPath, FALSE);
	svPath = svPath + "\\GreentreeInterface";
	svCommandLine = "/s \"" + svPath + ".dll\"";
	result = LaunchAppAndWait("regsvr32", svCommandLine, WAIT);
	
	if result >= 0 then
		svCommand = svPath + ".exe\"";
		svCommandLine = " //regServer";
		result = LaunchApp(svCommand, svCommandLine);
	else
		MessageBox("Registration of the Greentree interface has failed. You may need to do this manually.", INFORMATION);
	endif;
end;
//----------------------------------------------------------------------
//Clean up
//----------------------------------------------------------------------
function GTCleanUp()
begin
	/*
	if ((bDelETime) && (bDelEServ) && (bDelEReq) && (bIsWebstore = FALSE)) then
		//Delete the TARGETDIR ^ //Web directory
		DeleteDir(TARGETDIR ^ "\\Web", ALLCONTENTS);
	else
		if bDelETime then
			DeleteDir(TARGETDIR ^ "Web\\eTimesheets", ALLCONTENTS);
		endif;
		if bDelEServ then
			DeleteDir(TARGETDIR ^ "Web\\eService", ALLCONTENTS);
		endif;
		if bDelEReq then
			DeleteDir(TARGETDIR ^ "Web\\eRequistions", ALLCONTENTS);
		endif;
	endif;
*/

	DeleteFile("PartialGreentreeInstaller.exe");
	//DeleteFile("vcredist_x86.exe");
	DeleteFile("Install.ini");
	if bIsBlankMulti then
		TARGETDIR = svBlankBin;
		DeleteFile("getIPAddr.bat");
		DeleteFile("ipconfig.txt");
	endif;
	if bIsDemoMulti then
		TARGETDIR = svDemoBin;
		DeleteFile("getIPAddr.bat");
		DeleteFile("ipconfig.txt");
	endif;
	if bIsTestMulti then
		TARGETDIR = svTestBin;
		DeleteFile("getIPAddr.bat");
		DeleteFile("ipconfig.txt");
	endif;
end;
//----------------------------------------------------------------------
//Create the batch files for starting and stoping the services
//----------------------------------------------------------------------
function GTBatchFiles()
	
begin

	if bIsBlank && bIsBlankMulti then
		GTBlankBatchFiles();
	endif;
	if bIsDemo && bIsDemoMulti then
		GTDemoBatchFiles();
	endif;
	if bIsTest && bIsTestMulti then
		GTTestBatchFiles();
	endif;
end;
//----------------------------------------------------------------------
//Create the FREE registry Settings
//----------------------------------------------------------------------
function GTFreeReg()
	
	STRING sVer,s, szExcelVerFindKey, szExcelVerSetKey, szExcelOpenName, szXLAPath, szDemoIni;
	NUMBER i, nType, nLen,nResult;
	BOOL bNotFound, bNotDone;
	
begin
	
	if bIsDemo then
		szXLAPath = svDemoBin;
	else
		return 0;
	endif;
	
	szDemoIni = TARGETDIR;
	LongPathToQuote(szDemoIni, FALSE);
	szDemoIni = szDemoIni ^ "Demo\\jadeDemo.ini";
			
	LongPathToQuote(szXLAPath, FALSE);
	szXLAPath = szXLAPath ^ "\\Greentre4.xla";
	i = 8;
	bNotFound = TRUE;
	while i <= 12 && bNotFound
		RegDBSetDefaultRoot (HKEY_LOCAL_MACHINE);
		NumToStr(sVer, i);
		szExcelVerFindKey = "\\SOFTWARE\\Microsoft\\Office\\" + sVer + ".0\\Excel\\InstallRoot";
		if RegDBKeyExist(szExcelVerFindKey) = 1 then
			bNotFound = FALSE;
		endif;
		if bNotFound then
			i = i + 1;
		endif;
	endwhile;
	if bNotFound = FALSE then
		//i.e. it was found
		NumToStr(sVer, i);
		szExcelVerSetKey = "\\Software\\Microsoft\\Office\\" + sVer + ".0\\Excel\\Options\\";
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);
		nResult = RegDBKeyExist(szExcelVerSetKey);
		if nResult < 1 then
			//else create it
			Disable(LOGGING);
			szExcelVerSetKey = "\\Software\\Microsoft\\Office\\" + sVer + ".0\\Excel\\Options\\";
			RegDBCreateKeyEx(szExcelVerSetKey, "OPEN");
			Enable(LOGGING);
			szExcelVerSetKey = "\\Software\\Microsoft\\Office\\" + sVer + ".0\\Excel\\Options\\";
			RegDBSetKeyValueEx (szExcelVerSetKey, "OPEN", REGDB_STRING, szXLAPath, -1);
		else
			//now check the OPEN values
			i = 1;
			bNotDone = TRUE;
			while i < 10 && bNotDone
				szExcelOpenName = "OPEN";
				if i != 1 then
					NumToStr(s, i);
					szExcelOpenName = "OPEN" + s;
				endif;
				szExcelVerSetKey = "\\Software\\Microsoft\\Office\\" + sVer + ".0\\Excel\\Options\\";
				nResult = RegDBGetKeyValueEx (szExcelVerSetKey, szExcelOpenName, nType, s, nLen);
				StrToLower(s,s);
				if s % "greentre4.xla" then
					//Have to manually change the setting in excel.
					return 0;	
				endif;
				if nResult < 0 || s = "" then
					//found a free open value.
					RegDBCreateKeyEx(szExcelVerSetKey, szExcelOpenName);
					RegDBSetKeyValueEx (szExcelVerSetKey, szExcelOpenName, REGDB_STRING, szXLAPath, -1);
					bNotDone = FALSE;
				endif;
				i = i + 1;
			endwhile;
		endif;
		//now setup the options in the registry.
		RegDBSetDefaultRoot(HKEY_CURRENT_USER);
		//Ini File
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\IniFile";
		nResult = RegDBKeyExist(szExcelVerSetKey);
		if nResult < 0 then
			//create the key
			szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
			RegDBCreateKeyEx(szExcelVerSetKey, "IniFile");
		endif;
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
		RegDBSetKeyValueEx(szExcelVerSetKey, "IniFile", REGDB_STRING, szDemoIni, -1);
		//Bin directory
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\SystemDir";
		nResult = RegDBKeyExist(szExcelVerSetKey);
		if nResult < 0 then
			//create the key
			szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
			RegDBCreateKeyEx(szExcelVerSetKey, "SystemDir");
		endif;
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
		RegDBSetKeyValueEx(szExcelVerSetKey, "SystemDir", REGDB_STRING, svDemoBin, -1);
		//System Dir
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\DataDir";
		nResult = RegDBKeyExist(szExcelVerSetKey);
		if nResult < 0 then
			//create the key
			szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
			RegDBCreateKeyEx(szExcelVerSetKey, "DataDir");
		endif;
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
		RegDBSetKeyValueEx(szExcelVerSetKey, "DataDir", REGDB_STRING, svDemoSystem, -1);
		//Multi-User
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\MultiUser";
		nResult = RegDBKeyExist(szExcelVerSetKey);
		if nResult < 0 then
			//create the key
			szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
			RegDBCreateKeyEx(szExcelVerSetKey, "MultiUser");
		endif;
		szExcelVerSetKey = "\\Software\\VB and VBA Program Settings\\GreenTree Excel Addin\\System\\";
		if bIsDemoMulti then
			RegDBSetKeyValueEx(szExcelVerSetKey, "MultiUser", REGDB_STRING, "True", -1);
		else
			RegDBSetKeyValueEx(szExcelVerSetKey, "MultiUser", REGDB_STRING, "False", -1);
		endif;
		
	endif;
end;

function ExtractPartialInstall()

	NUMBER nDisk, nResult;

begin
	nDisk = 1;
    nResult = FeatureMoveData("", nDisk, 0);
    nResult = FeatureSelectItem(MEDIA, "GreentreeEndUser", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Blank System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Demo System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Other", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Blank POS System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Web", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Templates", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Test System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Test System with POS", FALSE);

	
	nResult = FeatureSelectItem(MEDIA, "PartialInstaller", TRUE);
	nResult = FeatureMoveData( MEDIA, nDisk, 0 );
    HandleMoveDataError( nResult );		
    nResult = FeatureMoveData("", nDisk, 0);

    nResult = FeatureSelectItem(MEDIA, "Blank System", TRUE);
	nResult = FeatureSelectItem(MEDIA, "Demo System", TRUE);
		
end;

function excludeAllComponents()
	NUMBER nResult;
begin	
	nResult = FeatureSelectItem(MEDIA, "Blank System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Demo System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Blank POS System", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Test System", FALSE);	
	nResult = FeatureSelectItem(MEDIA, "Test System with POS", FALSE);	
	nResult = FeatureSelectItem(MEDIA, "Web", FALSE);
	nResult = FeatureSelectItem(MEDIA, "Templates", FALSE);
end;

function DialogAskAudience()
	STRING sMsg, sOpt1, sOpt2, sOpt3;
	BOOL bOpt1, bOpt2, bOpt3;
	NUMBER nResult;
begin
	sMsg = "Please choose the audience for this installation.";
	sOpt1 = "Greentree End User (Greentree Users)";
	if bIs64BitSetup then
		sOpt2 = "Greentree Server (Greentree Server Options)";
		sOpt3 = "Greentree Website";
		SetDialogTitle(DLG_ASK_OPTIONS, "Select the Audience for this installation");
		nResult = AskOptions(EXCLUSIVE, sMsg, sOpt1, bOpt1, sOpt2, bOpt2, sOpt3, bOpt3);
		bvServerAud = bOpt2;
		bvWebsiteAud = bOpt3;
	else
		SetDialogTitle(DLG_ASK_OPTIONS, "Select the Audience for this installation");
		nResult = AskOptions(EXCLUSIVE, sMsg, sOpt1, bOpt1);
		bvServerAud = FALSE;
	endif;
	
end;

function SetupEUInstall()
	STRING sWorkingDir, sCommandLine, sIconPath, sItemName, sProgram, sShortCutKey, sProgramFolder;
	NUMBER nIcon, nFlag;
begin
	GTFreeReg();
	RegisterGTInterface();
	sProgramFolder = "Greentree End User";
	sWorkingDir = TARGETDIR;
	sCommandLine = "";
	nIcon = 0;
	nFlag = REPLACE;	
	sItemName= "Greentree";
	sProgram = TARGETDIR ^ "ConnectionManager.exe";
	sIconPath = sProgram;
	sShortCutKey = "";
	LongPathToQuote(sProgram, TRUE);
	LongPathToQuote(sIconPath, FALSE);
	sCommandLine = sProgram + " " + sCommandLine;
	if bDesktopIcons then
		AddFolderIcon(FOLDER_DESKTOP, sItemName, sCommandLine, sWorkingDir, sIconPath, nIcon, sShortCutKey, nFlag);	
	endif;
	AddFolderIcon(sProgramFolder, sItemName, sCommandLine, sWorkingDir, sIconPath, nIcon, sShortCutKey, nFlag);	
	
		
end;

function SetupWebsiteInstall()
	STRING sResult;
	NUMBER nResult;
begin
	svDir = SRCDISK ^ "\\WebsiteInstaller\\Greentree Website.msi";
	
	LongPathToQuote(svDir, TRUE);
	svDir = '/i ' + svDir;
	//MessageBox(svDir,0);
	nResult = LaunchAppAndWait('msiexec.exe', svDir, LAAW_OPTION_WAIT);
	if nResult < 0 then
    	MessageBox("Launching the Greentree website installer failed.\nYou will need to do this manually!", WARNING);
    elseif LAAW_PARAMETERS.nLaunchResult != 0 then
		MessageBox("The Greentree website installer failed to complete!", WARNING);
    endif;
    
end;


function CreateUnInstallLinks()
	STRING svUninstLogFile;
	STRING szProgram, svFolder, sItemName;
begin

	if bvServerAud then
		sItemName = "Uninstall Greentree";
		svFolder = "Greentree";
	else
		sItemName = "Uninstall Greentree End User";
		svFolder = "Greentree End User";
	endif;

	svUninstLogFile = svLogFile;
	LongPathToQuote(svUninstLogFile, TRUE);
	szProgram = UNINST;	
	szProgram = szProgram + " -f" + svUninstLogFile;
	AddFolderIcon(svFolder, sItemName, 	szProgram, WINDIR, "", 0, "", REPLACE);

end;

function SetJadeIniFileSectionForRegApp(szInstallIni, szBinDir, szSplash)
	NUMBER nResult;
begin
	nResult = WriteProfString(szInstallIni, "Jade", "OpeningForm", "true");
	nResult = WriteProfString(szInstallIni, "Jade", "AviFile", szBinDir ^ "\\progress.avi");
	nResult = WriteProfString(szInstallIni, "Jade", "BitMapFile", szBinDir ^ szSplash);
	nResult = WriteProfString(szInstallIni, "Jade", "AviPos", "107,223");
	nResult = WriteProfString(szInstallIni, "Jade", "StatusPos","1000, 1000");
	nResult = WriteProfString(szInstallIni, "Jade", "ApplicationPos", "1000, 1000, 1000, 1000");
	nResult = WriteProfString(szInstallIni, "Jade", "SchemaPos", "1000, 1000, 1000, 1000");
	nResult = WriteProfString(szInstallIni, "Jade", "ServerPos", "1000, 1000, 1000, 1000");
	nResult = WriteProfString(szInstallIni, "Jade", "PathPos", "1000, 1000, 1000, 1000");
	nResult = WriteProfString(szInstallIni, "Jade", "VersionPos", "1000, 1000, 1000, 1000");	

end;

function SetJadeIniFileSectionForLoginApp(szInstallIni)
	NUMBER nResult;
begin
	
	nResult = WriteProfString(szInstallIni, "Jade", "OpeningForm", "true");
	nResult = WriteProfString(szInstallIni, "Jade", "BitMapFile", "splash.bmp");
	nResult = WriteProfString(szInstallIni, "Jade", "AviFile", "progress.avi");
	nResult = WriteProfString(szInstallIni, "Jade", "AviPos", "112,215");
	nResult = WriteProfString(szInstallIni, "Jade", "StatusPos","125, 100");
	nResult = WriteProfString(szInstallIni, "Jade", "ApplicationPos", "125, 120, 230, 120");
	nResult = WriteProfString(szInstallIni, "Jade", "SchemaPos", "125, 140, 230, 140");
	nResult = WriteProfString(szInstallIni, "Jade", "ServerPos", "125, 160, 230, 160");
	nResult = WriteProfString(szInstallIni, "Jade", "PathPos", "125, 180, 230, 180");
	nResult = WriteProfString(szInstallIni, "Jade", "VersionPos", "125, 200, 230, 200");	
	nResult = WriteProfString(szInstallIni, "Jade","StatusFontColor","default, 8, true, 16777215, 16777215");
	nResult = WriteProfString(szInstallIni, "Jade","ApplicationFontColors","default, 8, true, 8925928, 16777215");
	nResult = WriteProfString(szInstallIni, "Jade","SchemaFontColors","default, 8, true, 8925928, 16777215");
	nResult = WriteProfString(szInstallIni, "Jade","ServerFontColors","default, 8, true, 8925928, 16777215");
	nResult = WriteProfString(szInstallIni, "Jade","PathFontColors","default, 8, true, 8925928, 16777215");
	nResult = WriteProfString(szInstallIni, "Jade","VersionFontColors","default, 8, true, 8925928, 16777215");

end;


//---------------------------------------------------------------------------                                                                        
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures;
    BOOL    bLicenseAccepted;	
begin	
   
    nSetupType = COMPLETE;	
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdLicense2:
    szTitle = "";
    szOpt1 = "";
    szOpt2 = "";
    //{{IS_SCRIPT_TAG(License_File_Path)
    szLicenseFile = SUPPORTDIR ^ "License.rtf";
    //}}IS_SCRIPT_TAG(License_File_Path)
    //{{IS_SCRIPT_TAG(Dlg_SdLicense2)
    nResult = SdLicense2Rtf( szTitle, szOpt1, szOpt2, szLicenseFile, bLicenseAccepted );
    //}}IS_SCRIPT_TAG(Dlg_SdLicense2)
    if (nResult = BACK) then
        goto Dlg_SdWelcome;
    else
        bLicenseAccepted = TRUE;
    endif;

Dlg_SdRegisterUser:
    szMsg = "";
    szTitle = "";
    //{{IS_SCRIPT_TAG(Dlg_SdRegisterUser)	
    nResult = SdRegisterUser( szTitle, szMsg, szName, szCompany );
    //}}IS_SCRIPT_TAG(Dlg_SdRegisterUser)
    if (nResult = BACK) goto Dlg_SdLicense2;

Dlg_SetupType2:   
    szTitle = "";
    szMsg = "";
    nResult = CUSTOM;
    //{{IS_SCRIPT_TAG(Dlg_SetupType2)	
    nResult = SetupType2( szTitle, szMsg, "", nSetupType, 0 );
    //}}IS_SCRIPT_TAG(Dlg_SetupType2)
    if (nResult = BACK) then
        goto Dlg_SdRegisterUser;
    else
        nSetupType = nResult;
        if (nSetupType != CUSTOM) then
            szTargetPath = TARGETDIR;
            nSize = 0;
            FeatureCompareSizeRequired( MEDIA, szTargetPath, nSize );
            if (nSize != 0) then      
                MessageBox( szSdStr_NotEnoughSpace, WARNING );
                goto Dlg_SetupType2;
            endif;
        endif;   
    endif;

Dlg_SdAskDestPath2:
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SetupType2;
	szTitle = "";
    szMsg = "";
    if (nSetupType = CUSTOM) then
                //{{IS_SCRIPT_TAG(Dlg_SdAskDestPath2)	
		nResult = SdAskDestPath2( szTitle, szMsg, szDir );
                //}}IS_SCRIPT_TAG(Dlg_SdAskDestPath2)
        TARGETDIR = szDir;
    endif;
    if (nResult = BACK) goto Dlg_SetupType2;

Dlg_SdFeatureTree: 
    if ((nResult = BACK) && (nSetupType != CUSTOM)) goto Dlg_SdAskDestPath2;
    szTitle = "";
    szMsg = "";
    szFeatures = "";
    nLevel = 2;
    if (nSetupType = CUSTOM) then
        //{{IS_SCRIPT_TAG(Dlg_SdFeatureTree)	
        nResult = SdFeatureTree( szTitle, szMsg, TARGETDIR, szFeatures, nLevel );
        //}}IS_SCRIPT_TAG(Dlg_SdFeatureTree)
        if (nResult = BACK) goto Dlg_SdAskDestPath2;  
    endif;

Dlg_SQLServer:
    nResult = OnSQLServerInitialize( nResult );
    if( nResult = BACK ) goto Dlg_SdFeatureTree;

Dlg_ObjDialogs:
    nResult = ShowObjWizardPages( nResult );
    if (nResult = BACK) goto Dlg_SQLServer;
    
Dlg_SdStartCopy2:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdStartCopy2)	
    nResult = SdStartCopy2( szTitle, szMsg );	
    //}}IS_SCRIPT_TAG(Dlg_SdStartCopy2)
    if (nResult = BACK) goto Dlg_ObjDialogs;

    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );
 
    return 0;
end;

//#include "sddialog.rul"
//#include "ntservice.rul"
#include "blank.rul"
#include "demo.rul"
#include "test.rul"
#include "rot13.rul"
#include "generic.rul"


